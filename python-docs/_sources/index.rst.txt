.. slicematrixIO documentation master file, created by
   sphinx-quickstart on Tue Mar 14 17:28:13 2017.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

.. image:: logo_small.png
   :target: https://www.slicematrix.com

Welcome to the documentation for slicematrixIO-python
=====================================================

SliceMatrix-IO_ is a Platform as a Service (PaaS) where you can easily create and store machine learning models in our global cloud  

>>> from slicematrixIO import SliceMatrix
>>> sm  = SliceMatrix(api_key)

Create a minimum spanning tree model

>>> mst = sm.MinimumSpanningTree(dataset = prices)
>>> mst.neighbors("AAPL")

Train an isomap model

>>> iso = sm.Isomap(dataset = image_data)
>>> iso.embedding()

Use a Kalman filter for online hedge ratio estimation

>>> kf = sm.KalmanOLS(dataset = pairs_data)

Get the hedge ratio and update to new data

>>> kf.update(X = 147.25, Y = 88.17)

Train a probabilistic neural network classifer:

>>> pnn = sm.PNNClassifier(dataset = bc_data)
>>> pnn.predict([...])

Core Concepts
=============

The 2 core concepts for SliceMatrix-IO are: 

1) The Analytical Pipeline
2) The Model

.. _SliceMatrix-IO: https://www.slicematrix.com

.. image:: workflow.png

AP's can be thought of as assembly lines of code which can train machine learning models. AP's are reusable, meaning you can use the 
same AP to train multiple machine learning models using different input data. 

Model's are where the real magic happens. After the Pipeline trains a Model, the Model live's on SliceMatrix-IO's machine learning 
infrastructure in the cloud. That means you can access you model after you create it in a distributed fasion. You can also train models
in parallel subject to your usage plan's request / throttling limits.

Installation
============

The easiest way to install the package is with pip:

> pip install slicematrix-IO

To get an API key, go here_

.. _here: https://www.slicematrix.com/pricing

Package Structure
=================

The package is organized into many different submodules. They can be roughly grouped as follows:

- Low-Level / Shared
    1) :mod:`slicematrixIO.connect` : Low level API client
    2) :mod:`slicematrixIO.core` : Base classes 
    3) :mod:`slicematrixIO.utils`: Utility objects
- High-Level
    1) :mod:`slicematrixIO.client`: The High Level Client
    2) The models...
        * :mod:`slicematrixIO.bayesian_filters`: Bayesian Filters
        * :mod:`slicematrixIO.classifiers`: Classifiers
        * :mod:`slicematrixIO.distributions`: Distribution Models / Anomaly Detection
        * :mod:`slicematrixIO.graphs`: Network Graph Models
        * :mod:`slicematrixIO.manifolds`: Manifold Learning Models
        * :mod:`slicematrixIO.matrices`: Distance / Similarity Matrices
        * :mod:`slicematrixIO.matrix_models`: Matrix Models
        * :mod:`slicematrixIO.regressors`: Regressors
- Visualization
    1) :mod:`slicematrixIO.client`: Visualizing SliceMatrix-IO network graph models in the Jupyter Notebook

Examples / Use Cases
====================

1) Manifold Learning and Visualization on the Nasdaq 100
    - https://slicematrix.github.io/manifold_learning_js.html
2) KNN vs PNN Classification: Shuttle Dataset
    - https://slicematrix.github.io/knn_vs_pnn_shuttle
3) Dynamic Hedge Ratios with the Kalman Filter
    - https://slicematrix.github.io/kalman_filter_pairs
4) KNN vs PNN Classification: Breast Cancer Image Dataset
    - https://slicematrix.github.io/knn_bc.html
5) Minimum Spanning Trees in Python
    - https://slicematrix.github.io/mst_stock_market
6) Detecting Stock Market Anomalies
    - https://slicematrix.github.io/stock_market_anomalies
7) Integrating Bloomberg and SliceMatrix-IO
    - https://slicematrix.github.io/bloomberg_and_slicematrix
8) Integrating D3, NodeJS, and SliceMatrix-IO to Visualize the S&P 500
    - http://www.slicematrix.io/finetwork 

.. toctree::
   :maxdepth: 2
   :caption: Contents:

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
